"use strict";const o=require("../common/vendor.js"),t={namespaced:!0,state:()=>({cart:JSON.parse(o.index.getStorageSync("cart")||"[]")}),mutations:{saveToStorage(t){o.index.setStorageSync("cart",JSON.stringify(t.cart))},addToCart(o,t){const e=o.cart.find((o=>o.goods_id===t.goods_id));e?e.goods_count++:o.cart.push(t),this.commit("m_cart/saveToStorage")},updateGoodsState(o,t){const e=o.cart.find((o=>o.goods_id===t.goods_id));e&&(e.goods_state=t.goods_state,this.commit("m_cart/saveToStorage"))},updateGoodsCount(o,t){const e=o.cart.find((o=>o.goods_id===t.goods_id));e&&(e.goods_count=t.goods_count,this.commit("m_cart/saveToStorage"))},removeGoodsById(o,t){o.cart=o.cart.filter((o=>o.goods_id!==t)),this.commit("m_cart/saveToStorage")},updateAllGoodsState(o,t){o.cart.forEach((o=>o.goods_state=t)),this.commit("m_cart/saveToStorage")}},getters:{total:o=>o.cart.reduce(((o,t)=>o+t.goods_count),0),checkedCount:o=>o.cart.filter((o=>o.goods_state)).reduce(((o,t)=>o+t.goods_count),0),checkedGoodsAmount:o=>o.cart.filter((o=>o.goods_state)).reduce(((o,t)=>o+t.goods_price*t.goods_count),0).toFixed(2)}};exports.moduleCart=t;
